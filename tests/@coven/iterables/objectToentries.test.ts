import { iterableToArray, objectToEntries } from "@coven/iterables";
import { assertEquals } from "@std/assert/equals";

const symbol = Symbol("ğŸŸ©");

Deno.test("an empty object returns an empty array", () =>
	assertEquals(iterableToArray(objectToEntries({})), []));

Deno.test(
	"an object with a single property returns an array with a single tuple",
	() =>
		assertEquals(iterableToArray(objectToEntries({ "ğŸŸ©": "ğŸŸ¢" })), [
			["ğŸŸ©", "ğŸŸ¢"],
		]),
);

Deno.test(
	"an object with a few properties returns an array with a few tuples",
	() =>
		assertEquals(
			iterableToArray(objectToEntries({ "ğŸ’š": "âœ…", "ğŸŸ©": "ğŸŸ¢" })),
			[
				["ğŸ’š", "âœ…"],
				["ğŸŸ©", "ğŸŸ¢"],
			],
		),
);

Deno.test(
	"an object with a number property returns an array with a tuple with that number turned intro a string",
	() =>
		assertEquals(iterableToArray(objectToEntries({ 0: "ğŸŸ¢" })), [
			["0", "ğŸŸ¢"],
		]),
);

Deno.test("an object with a symbol property returns that symbol entry", () =>
	assertEquals(iterableToArray(objectToEntries({ [symbol]: "ğŸŸ¢" })), [
		[symbol, "ğŸŸ¢"],
	]));
